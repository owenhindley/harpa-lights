var HarpaVisualiserBase = require("../common/HarpaVisualiserBase.js");
var noise = require("./perlin.js").noise;

    var CrashAndBurnVisualiser = function() {
        this.currentVolume = 0;      // stores the current volume
        this.currentBeatValue = 0;  // stores the current beat envelope / value
        
        //console.log(this.faces.front);        37/13
        //console.log(this.faces.side);         39/9
        
        this.MAX = 481;
        this.FRONT_WIDTH = 37;
        this.FRONT_HEIGHT = 13;
        
        this.L_MAX = 351;
        this.L_FRONT_WIDTH = 39;
        this.L_FRONT_HEIGHT = 9;
        
        this.buffer = [];
        this.buffer2 = [];
        for (var i = 0; i < this.MAX; i++)
        {
            this.buffer[i] = 0;
            this.buffer2[i] = 0;
        }
        
        this.lbuffer = [];
        this.lbuffer2 = [];
        for (var i = 0; i < this.L_MAX; i++)
        {
            this.lbuffer[i] = 0;
            this.lbuffer2[i] = 0;
        }
        
        this.line = [];
        for (var i = 0; i < this.FRONT_WIDTH + this.L_FRONT_WIDTH; i++)
            this.line[i] = 0;
        
        this.quietForAWhile = 0;
        
        this.logo = [
            [ // s
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ],
        [ // o
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ],
        [   // sonar
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ],
        [
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
       ],
       [   // sonar
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ],
 
        ];
        
        this.sonar = [            255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,232,232,232,255,219,219,219,255,247,247,247,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,249,249,249,255,254,254,254,255,253,253,253,255,255,255,255,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,255,255,255,255,253,253,253,255,254,254,254,255,254,254,254,255,142,142,142,255,71,71,71,255,212,212,212,255,255,255,255,255,253,253,253,255,254,254,254,255,253,253,253,255,254,254,254,255,253,253,253,255,254,254,254,255,253,253,253,255,253,253,253,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,253,253,253,255,253,253,253,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,253,253,253,255,254,254,254,255,254,254,254,255,254,254,254,255,255,255,255,255,136,136,136,255,62,62,62,255,210,210,210,255,255,255,255,255,253,253,253,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,253,253,253,255,253,253,253,255,254,254,254,255,254,254,254,255,254,254,254,255,255,255,255,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,253,253,253,255,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,254,254,254,255,254,254,254,255,187,187,187,255,141,141,141,255,232,232,232,255,255,255,255,255,253,253,253,255,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,252,252,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,252,252,252,255,198,198,198,255,146,146,146,255,132,132,132,255,147,147,147,255,204,204,204,255,255,255,255,255,255,255,255,255,254,254,254,255,206,206,206,255,151,151,151,255,142,142,142,255,168,168,168,255,235,235,235,255,254,254,254,255,251,251,251,255,177,177,177,255,161,161,161,255,215,215,215,255,175,175,175,255,135,135,135,255,157,157,157,255,235,235,235,255,255,255,255,255,254,254,254,255,215,215,215,255,154,154,154,255,133,133,133,255,137,137,137,255,177,177,177,255,243,243,243,255,254,254,254,255,209,209,209,255,157,157,157,255,192,192,192,255,212,212,212,255,146,146,146,255,212,212,212,255,255,255,255,255,177,177,177,255,71,71,71,255,83,83,83,255,110,110,110,255,75,75,75,255,67,67,67,255,191,191,191,255,255,255,255,255,176,176,176,255,76,76,76,255,69,69,69,255,76,76,76,255,67,67,67,255,102,102,102,255,228,228,228,255,252,252,252,255,101,101,101,255,69,69,69,255,91,91,91,255,71,71,71,255,68,68,68,255,66,66,66,255,130,130,130,255,254,254,254,255,206,206,206,255,75,75,75,255,67,67,67,255,103,103,103,255,87,87,87,255,66,66,66,255,142,142,142,255,255,255,255,255,165,165,165,255,61,61,61,255,94,94,94,255,84,84,84,255,57,57,57,255,177,177,177,255,255,255,255,255,128,128,128,255,66,66,66,255,126,126,126,255,230,230,230,255,192,192,192,255,140,140,140,255,190,190,190,255,232,232,232,255,88,88,88,255,74,74,74,255,172,172,172,255,223,223,223,255,121,121,121,255,65,65,65,255,141,141,141,255,252,252,252,255,109,109,109,255,72,72,72,255,113,113,113,255,209,209,209,255,144,144,144,255,74,74,74,255,91,91,91,255,242,242,242,255,191,191,191,255,131,131,131,255,176,176,176,255,253,253,253,255,186,186,186,255,71,71,71,255,101,101,101,255,250,250,250,255,170,170,170,255,72,72,72,255,76,76,76,255,129,129,129,255,177,177,177,255,218,218,218,255,255,255,255,255,179,179,179,255,75,75,75,255,72,72,72,255,88,88,88,255,121,121,121,255,164,164,164,255,245,245,245,255,198,198,198,255,71,71,71,255,97,97,97,255,243,243,243,255,255,255,255,255,187,187,187,255,70,70,70,255,102,102,102,255,240,240,240,255,109,109,109,255,70,70,70,255,184,184,184,255,255,255,255,255,206,206,206,255,76,76,76,255,91,91,91,255,235,235,235,255,254,254,254,255,204,204,204,255,155,155,155,255,124,124,124,255,95,95,95,255,76,76,76,255,102,102,102,255,249,249,249,255,170,170,170,255,68,68,68,255,104,104,104,255,245,245,245,255,255,255,255,255,254,254,254,255,254,254,254,255,251,251,251,255,213,213,213,255,161,161,161,255,119,119,119,255,82,82,82,255,66,66,66,255,143,143,143,255,197,197,197,255,71,71,71,255,98,98,98,255,244,244,244,255,254,254,254,255,188,188,188,255,70,70,70,255,101,101,101,255,241,241,241,255,109,109,109,255,70,70,70,255,190,190,190,255,255,255,255,255,207,207,207,255,76,76,76,255,91,91,91,255,238,238,238,255,165,165,165,255,69,69,69,255,85,85,85,255,144,144,144,255,152,152,152,255,75,75,75,255,102,102,102,255,250,250,250,255,169,169,169,255,67,67,67,255,122,122,122,255,255,255,255,255,254,254,254,255,254,254,254,255,253,253,253,255,150,150,150,255,119,119,119,255,196,196,196,255,255,255,255,255,161,161,161,255,67,67,67,255,109,109,109,255,221,221,221,255,87,87,87,255,75,75,75,255,178,178,178,255,228,228,228,255,124,124,124,255,65,65,65,255,138,138,138,255,251,251,251,255,108,108,108,255,70,70,70,255,189,189,189,255,255,255,255,255,206,206,206,255,77,77,77,255,93,93,93,255,230,230,230,255,110,110,110,255,67,67,67,255,170,170,170,255,255,255,255,255,182,182,182,255,70,70,70,255,103,103,103,255,250,250,250,255,169,169,169,255,67,67,67,255,120,120,120,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,170,170,170,255,64,64,64,255,78,78,78,255,120,120,120,255,86,86,86,255,70,70,70,255,168,168,168,255,255,255,255,255,169,169,169,255,73,73,73,255,71,71,71,255,81,81,81,255,67,67,67,255,98,98,98,255,222,222,222,255,251,251,251,255,101,101,101,255,61,61,61,255,185,185,185,255,255,255,255,255,204,204,204,255,68,68,68,255,84,84,84,255,236,236,236,255,142,142,142,255,65,65,65,255,93,93,93,255,126,126,126,255,90,90,90,255,69,69,69,255,89,89,89,255,243,243,243,255,166,166,166,255,58,58,58,255,115,115,115,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,252,252,255,195,195,195,255,140,140,140,255,120,120,120,255,138,138,138,255,193,193,193,255,252,252,252,255,253,253,253,255,252,252,252,255,199,199,199,255,139,139,139,255,125,125,125,255,158,158,158,255,229,229,229,255,254,254,254,255,250,250,250,255,174,174,174,255,154,154,154,255,219,219,219,255,255,255,255,255,227,227,227,255,157,157,157,255,166,166,166,255,245,245,245,255,238,238,238,255,155,155,155,255,123,123,123,255,143,143,143,255,202,202,202,255,164,164,164,255,161,161,161,255,239,239,239,255,209,209,209,255,152,152,152,255,181,181,181,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255,254,254,254,255,253,253,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,253,253,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,254,254,254,255,254,254,254,255,255,255,255,255,255,255,255,255
        ];
        
        this.frame = 0;
        
        this.range = [

    // BSOD part
      0,  0,255,255,
    128,128,128,255
        ];
        
    }
    var p = CrashAndBurnVisualiser.prototype = new HarpaVisualiserBase();

    p.render = function() {
        
        /*
            Firstly, I'd just like to say this is filthiest code I've written in a while and thanks, it's been fun to do.
        */
        
        this.frame++;
        
        // keep a copy of the line
        for (var i = this.FRONT_WIDTH + this.L_FRONT_WIDTH-1; i > 0; i--)
            this.line[i] = this.line[i-1];
             
        var volume = Math.min(1, 1-(this.currentVolume));
        this.line[0] = Math.floor(0 + (volume * 13));
        
        // clear the screen to black
        this.frontCtx.fillStyle = 'rgb(0,0,0)';
        this.frontCtx.fillRect(0, 0, this.faces.front.width, this.faces.front.height);
        
        // clear side to black
        this.sideCtx.fillStyle = 'rgb(0,0,0)';
        this.sideCtx.fillRect(0,0, this.faces.side.width, this.faces.side.width);
        
        // get the image data and pixel values
        var imageData = this.frontCtx.getImageData(0,0,
                                this.FRONT_WIDTH, this.FRONT_HEIGHT);
        var pixels = imageData.data;
        var lImageData = this.sideCtx.getImageData(0,0,
                                this.L_FRONT_WIDTH, this.L_FRONT_HEIGHT);
        var lpixels = lImageData.data;
        
        
        for (var i = 0; i < this.L_FRONT_WIDTH; i++)
        {
            var x = i;
            var y = 8;
            //var y = this.line[i];
            
            this.lbuffer[((y) * this.L_FRONT_WIDTH) + x] |= 
                ((1-(this.line[i]/13)) * 255);
        }
        
        for (var i = 0; i < this.FRONT_WIDTH; i++)
        {
            var x = i;
            var y = 12;
            //var y = this.line[i];
            
            this.buffer[((y) * this.FRONT_WIDTH) + x] |= 
                ((1-(this.line[i + this.L_FRONT_WIDTH]/13)) * 255);
            //Math.floor(96 + Math.random()*128);   
        }
            
        // MAGIC NUMBER

        // BSOD if the volume is too high - damn kids these days!
        if ((1 - volume) >= 0.99)
        {
            for (var i = 0; i < this.MAX; i++)
                this.buffer[i] = 280;
            for (var i = 0; i < this.L_MAX; i++)
                this.lbuffer[i] = 280;
        }
        //document.querySelector('#fuck').innerHTML = "volume=" + (1-volume) + 
        //    "<br>this.buffer[50] = " + this.buffer[50];
        
        //console.log(1 - volume);
        
        if ((1-volume) < 0.4)
        {
            this.quietForAWhile++;
        }
        // MAGIC NUMBER
        else if ((1 - volume) >= 0.4)
        {
            this.quietForAWhile = 0;
        }
        
        var animations = [
            {'start': 1, 'stop': 1, 'frame': this.logo[0], 'multiply': true},       // S
            {'start': 60, 'stop': 60, 'frame': this.logo[1], 'multiply': true},     // O
            {'start': 120, 'stop': 121, 'frame': this.logo[2], 'multiply': true},   // N
            {'start': 180, 'stop': 181, 'frame': this.logo[3], 'multiply': true},   // A
            {'start': 240, 'stop': 241, 'frame': this.logo[4], 'multiply': true},   // R
            {'start': 300, 'stop': 305, 'frame': this.sonar, 'multiply': false}
        ];
        


        if (this.quietForAWhile > 200)
        for (var i = 0; i < animations.length; i++)
        {
            if (this.quietForAWhile == 201)
                this.frame = 0;
            
            var animation = animations[i];
            var frameNumber = (this.frame % 500);
            if (frameNumber >= animation.start && frameNumber <= animation.stop)
                for (var j = 0; j < this.MAX; j++)
                {
                    if (animation.multiply)
                        this.buffer[j] |= Math.floor(animation.frame[j]*255);
                    else
                    {
                        this.buffer[j] |= (255 - animation.frame[((j*4)+1)]);
                    }
                }
        }
        
        if (this.frame >= 10000)
            this.frame = 0;
    
        for (var i = 0; i < this.L_MAX; i++)
        {
            var x = i % this.L_FRONT_WIDTH;
            var y = Math.floor(i / this.L_FRONT_WIDTH);
            
            if (x >= 0 && x <= this.L_FRONT_WIDTH 
                && y >= 0 && y <= this.L_FRONT_HEIGHT)
            {
                var n = 0, s = 0, w = 0, e = 0, m = 0;
                
                m = this.lbuffer[(y * this.L_FRONT_WIDTH) + x];
                n = m;  s = m;  w = m; e = m;  
                
                if (y > 0)
                    n = this.lbuffer[((y-1) * this.L_FRONT_WIDTH) + x];
                if (y < this.L_FRONT_HEIGHT-1)
                    s = this.lbuffer[((y+1) * this.L_FRONT_WIDTH) + x];
                if (x > 0)
                    w = this.lbuffer[(y * this.L_FRONT_WIDTH) + x - 1];
                if (x < this.L_FRONT_WIDTH-1)
                    e = this.lbuffer[(y * this.L_FRONT_WIDTH) + x + 1];
                
                
                var val = Math.floor(Math.max(0,(n+s+w+e+m)/5.0));
                var p = Math.floor(Math.abs((noise.perlin2(x/100, y/100) * 10)));
                val = val - p;
                
                if (val <= 0)
                    val = 0;
                if (val > 256)
                    val = 256;
                
                this.lbuffer2[((y-1) * this.L_FRONT_WIDTH) + x] = val;
                
                // red component
                lpixels[(i*4)]   = this.range[(val*4)];
                lpixels[(i*4)+1] = this.range[(val*4)+1];
                lpixels[(i*4)+2] = this.range[(val*4)+2];
                lpixels[(i*4)+3] = this.range[(val*4)+3];
                //pixels[(i*4)+1] = 255 - (i % 255);
            }
        }
        
        
        for (var i = 0; i < this.L_MAX; i++)
            this.lbuffer[i] = this.lbuffer2[i];
        
        
        
        for (var i = 0; i < this.MAX; i++)
        {
            var x = i % this.FRONT_WIDTH;
            var y = Math.floor(i / this.FRONT_WIDTH);
            
            if (x >= 0 && x <= this.FRONT_WIDTH 
                && y >= 0 && y <= this.FRONT_HEIGHT)
            {
                var n = 0, s = 0, w = 0, e = 0, m = 0;
                
                m = this.buffer[(y * this.FRONT_WIDTH) + x];
                n = m;  s = m;  w = m; e = m;  
                
                if (y > 0)
                    n = this.buffer[((y-1) * this.FRONT_WIDTH) + x];
                if (y < this.FRONT_HEIGHT-1)
                    s = this.buffer[((y+1) * this.FRONT_WIDTH) + x];
                if (x > 0)
                    w = this.buffer[(y * this.FRONT_WIDTH) + x - 1];
                if (x < this.FRONT_WIDTH-1)
                    e = this.buffer[(y * this.FRONT_WIDTH) + x + 1];
                
                
                var val = Math.floor(Math.max(0,(n+s+w+e+m)/5.0));
                var p = Math.floor(Math.abs((noise.perlin2(x/100, y/100) * 10)));
                val = val - p;
                
                if (val <= 0)
                    val = 0;
                if (val > 256)
                    val = 256;
                
                if (val == 256)
                {
                    // BSOD lines
                    if ((i > 161 && i < 170) || (i > 124 && i < 133))
                            val = 257;
                    else if ((i > 226 && i < 251)
                            || (i > 300 && i < 309)
                            || (i > 374 && i < 392)
                            )
                            val = 255;
                }
                this.buffer2[((y-1) * this.FRONT_WIDTH) + x] = val;
                
                // red component
                pixels[(i*4)]   = this.range[(val*4)];
                pixels[(i*4)+1] = this.range[(val*4)+1];
                pixels[(i*4)+2] = this.range[(val*4)+2];
                pixels[(i*4)+3] = this.range[(val*4)+3];
            }
        }
        
        for (var i = 0; i < this.MAX; i++)
            this.buffer[i] = this.buffer2[i];
        
        //document.querySelector('#fuck').innerHTML = "volume=" + (1-volume) + 
        //    "<br>this.buffer[50] = " + this.buffer[50];
        
        
        // blit to screen
        this.frontCtx.putImageData(imageData, 0,0);
        
        // blit to screen
        this.sideCtx.putImageData(lImageData, 0,0);

        // reduce beat value
        this.currentBeatValue *= 0.8;
        
    };
    
    /*
    p.oldrender = function() {
        //this.frontCtx.clearRect(0,0,this.faces.front.width,this.faces.front.height);

        //this.frame++;
        
        // - fill background color --
        this.frontCtx.fillStyle = 'hsl(' + (this.color+180) + ',100%,30%)';
        this.frontCtx.fillRect(0, 0,                                                            this.faces.front.width, this.faces.front.height);
        
        // set foreground color
        this.color = ((this.color + 0.1) % 360);
        this.frontCtx.fillStyle = 'hsl(' + this.color + ',100%,30%)';
        
        // draw line to bottom
        for (var i = 0; i < this.FRONT_WIDTH; i++)
        {
            for (var y = 0; y < this.FRONT_HEIGHT; y++)
            {
                this.frontCtx.fillRect(i,this.line[i]+1, 1, 
                                       this.FRONT_HEIGHT-2);
            }
        }
        
        // draw main line 
        this.frontCtx.fillStyle = 'rgb(255,255,255)';
        for (var i = 0; i < this.FRONT_WIDTH; i++)
        {
            this.frontCtx.fillRect(i, this.line[i], 1,1);    
        }
        
        */
        /*
        // ** Volume visualisation **
        for (var i = 0; i < this.FRONT_WIDTH-1; i++)
            this.line[i] = this.line[i+1];
        var volume = Math.min(1, 1 - (this.currentVolume / 20000));
        this.line[this.FRONT_WIDTH-1] = Math.floor(volume * this.FRONT_HEIGHT);

        // black background
        this.frontCtx.fillStyle = 'rgb(0,0,0)';
        this.frontCtx.fillRect(0, 0,                                                            this.faces.front.width, this.faces.front.height);
        */
        
        // draw line to bottom
        //for (var i = 0; i < this.FRONT_WIDTH; i++)
        //{
        //    this.buffer[(this.line[i] * this.FRONT_WIDTH) + i] = 360;
        //}
        //console.log(volume);
        //if (Math.floor((this.currentVolume / 20000) * this.FRONT_HEIGHT) > 9)
        /*
        if ((this.frame % 30) == 0)
            //for (var i = 0; i < ((this.currentVolume/20000) * 6); i++)
        if (this.currentBeatValue > 0.05)
            {
                var position = Math.floor(Math.random() * this.MAX);
                //this.buffer[position] = (this.currentVolume/20000) * (20000 + ( Math.random() * 600000));
                this.buffer[position] = (this.currentVolume/20000) * 10000;
            }
        */

        /*
        // define square
        var sw = Math.ceil((Math.random() * this.FRONT_WIDTH) - (this.FRONT_WIDTH/2));
        var sh = Math.ceil((Math.random() * this.FRONT_HEIGHT) - (this.FRONT_HEIGHT/2));
        var sx = Math.ceil((Math.random() * this.FRONT_WIDTH) - (this.FRONT_WIDTH/2));
        var sy = Math.ceil((Math.random() * this.FRONT_HEIGHT) - (this.FRONT_HEIGHT/2));

        sw = Math.min(sw + sx, this.FRONT_WIDTH);
        sh = Math.min(sh + sy, this.FRONT_HEIGHT);
        sw = Math.max(sw, 0);
        sh = Math.max(sh, 0);
        
        sx = Math.max(sx, 0);
        sy = Math.max(sy, 0);

        var sc = Math.random() * 360;
        
        for (var i = 0; i < this.MAX; i++)
        {
            var x = i % this.FRONT_WIDTH;
            var y = Math.floor(i / this.FRONT_WIDTH);
            
            if (x > sx && y <= sx + sw)
                if (y > sy && y <= sy + sh)
                    this.buffer[i] = sc;
        }
*/
        /*
        var show = [1,2,3,4];
        //if ((this.frame % 10) == 1)
        if (show.indexOf(this.frame % 60) != -1)
        {
            //set the name alight
            for (var i = 0; i < this.MAX; i++)
            {
                this.buffer[i] = this.buffer[i] | (this.ignition[i]*360);
            }
        }*/
        
       /* 
        for (var i = 0; i < this.MAX; i++)
        {
            var x = i % this.FRONT_WIDTH;
            var y = Math.floor(i / this.FRONT_WIDTH);
            
            if (x >= 0 && x <= this.FRONT_WIDTH 
                && y >= 0 && y <= this.FRONT_HEIGHT)
            {
                var n = 0, s = 0, w = 0, e = 0, m = 0;
                
                m = this.buffer[(y * this.FRONT_WIDTH) + x];
                n = m;  s = m;  w = m; e = m;  
                
                if (y > 0)
                    n = this.buffer[((y-1) * this.FRONT_WIDTH) + x];
                if (y < this.FRONT_HEIGHT)
                    s = this.buffer[((y+1) * this.FRONT_WIDTH) + x];
                if (x > 0)
                    w = this.buffer[(y * this.FRONT_WIDTH) + x - 1];
                if (x < this.FRONT_WIDTH)
                    e = this.buffer[(y * this.FRONT_WIDTH) + x + 1];
                
                
                //var val = Math.floor(Math.max(0,(n+s+w+e+m)/5.0));
                var val = Math.max(0,(n+s+w+e+m)/5.0);
                val = this.buffer[i];
                
                // reduce val down
                val = val * 0.90;
                //val = val - Math.abs((noise.perlin2(x, y) * 20));
                
                if (val <= 0)
                    val = 0;
                
                this.buffer2[((y) * this.FRONT_WIDTH) + x] = val;
                
                //var c = 20 + ((val/360) * 20);
                //var c = 30 + x + y;
                //this.frontCtx.fillStyle = 'hsl(' + c +',100%, ' + ((((val/360))*100)) + '%) ';
                this.frontCtx.fillStyle = 'hsl(' + val +',100%, 50%) ';
                this.frontCtx.fillRect(x,y,1,1);
            }
        }
        
        for (var i = 0; i < this.MAX; i++)
            this.buffer[i] = this.buffer2[i];
        
        
        //this.frontCtx.drawImage(this.range, 0,0);
        */
        /* this.frontCtx.clearRect(0,0,this.faces.front.width,this.faces.front.height);
        this.frontCtx.fillStyle = "white";
        var scaledHeight = 1 - (this.currentVolume / 20000);
        scaledHeight = Math.min(1, scaledHeight);
        scaledHeight *= this.faces.front.height;
        this.frontCtx.fillRect(0,scaledHeight, this.faces.front.width, this.faces.front.height - scaledHeight);

        // render simple bar on the side

        // ** Beat visualisation **
        this.frontCtx.fillStyle = "rgba(0,0,255,0.5)";
        var barWidth = this.currentBeatValue * this.faces.front.width * 0.5;
        this.frontCtx.fillRect(this.faces.front.width / 2, 0, barWidth / 2, this.faces.front.height);
        this.frontCtx.fillRect(this.faces.front.width / 2 - barWidth/2, 0, barWidth / 2, this.faces.front.height);
        */

        /*
        this.sideCtx.clearRect(0,0,this.faces.side.width,this.faces.side.height);
        this.sideCtx.fillStyle = "green";

        var scaledHeight = 1 - (this.currentVolume / 20000);
        scaledHeight = Math.min(1, scaledHeight);

        scaledHeight *= this.faces.side.height;

        this.sideCtx.fillRect(0,scaledHeight, this.faces.side.width, this.faces.side.height - scaledHeight);

                
        // ** Beat visualisation **
        
        this.sideCtx.fillStyle = "rgba(255,0,0,0.5)";

        barWidth = this.currentBeatValue * this.faces.side.width * 0.5;
        this.sideCtx.fillRect(this.faces.side.width / 2, 0, barWidth / 2, this.faces.side.height);
        this.sideCtx.fillRect(this.faces.side.width / 2 - barWidth/2, 0, barWidth / 2, this.faces.side.height);
        console.log("error, this should not be seen");
    };*/

    p.signal = function(channel, value) {

        // store beat values from channel 1
        if (channel == 1){
            this.currentBeatValue = value;
        }

        // store volume values from channel 2
        if (channel == 2){
            this.currentVolume = value * 1.3;
        }
    };


module.exports = CrashAndBurnVisualiser;



